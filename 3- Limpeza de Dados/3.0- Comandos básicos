🧹 TRATAMENTO E LIMPEZA DE DADOS NO PANDAS

Antes de analisar ou modelar dados, é fundamental limpar, padronizar e tratar informações ausentes ou incorretas.
O Pandas oferece muitas ferramentas práticas para isso.

⸻

📘 1. Verificando dados faltantes

Para detectar dados ausentes (NaN = Not a Number), usamos:
df.isnull() → retorna True/False
df.isnull().sum() → conta quantos valores nulos há por coluna
df.notnull() → mostra o oposto (True se não for nulo)

Exemplo:
df.isnull().sum()
➡️ Retorna um resumo de quantos valores estão ausentes em cada coluna.

⸻

🔹 2. Removendo dados ausentes

Remover linhas com valores nulos:
df.dropna()

Remover colunas com valores nulos:
df.dropna(axis=1)

Remover apenas se todas as colunas estiverem nulas:
df.dropna(how=“all”)

Remover se houver menos de X valores não nulos:
df.dropna(thresh=3)

➡️ Útil para manter apenas linhas “completas o suficiente”.

⸻

🔹 3. Preenchendo dados ausentes

Substituir nulos por um valor específico:
df.fillna(0)

Preencher nulos com o valor da coluna anterior (forward fill):
df.fillna(method=“ffill”)

Preencher nulos com o valor da próxima linha (backward fill):
df.fillna(method=“bfill”)

Preencher com a média da coluna:
df[“idade”].fillna(df[“idade”].mean())

➡️ Essa técnica é comum em dados numéricos (como preço, idade, etc.).

⸻

🔹 4. Substituindo valores específicos

df.replace(“Sim”, 1)
df.replace(“Não”, 0)

➡️ Converte respostas de texto para números, por exemplo.

Substituir múltiplos valores:
df.replace({“Sim”: 1, “Não”: 0, “Talvez”: 2})

Substituir valores em uma coluna específica:
df[“coluna”] = df[“coluna”].replace(“Desconhecido”, None)

⸻

🔹 5. Renomeando colunas e índices

Renomear colunas:
df.rename(columns={“nome_antigo”: “novo_nome”})

Renomear múltiplas colunas:
df.rename(columns={“idade”: “Idade”, “cidade”: “Cidade”})

Renomear índice (linhas):
df.rename(index={0: “primeira_linha”})

➡️ Muito útil para deixar os nomes mais legíveis.

⸻

🔹 6. Alterando tipos de dados (dtype)

Ver tipos atuais:
df.dtypes

Converter tipos:
df[“coluna”] = df[“coluna”].astype(float)

Converter automaticamente:
df = df.convert_dtypes()

Converter datas:
df[“data”] = pd.to_datetime(df[“data”])

➡️ Corrigir tipos evita erros em cálculos e agrupamentos.

⸻

🔹 7. Tratando duplicatas

Verificar duplicados:
df.duplicated()

Remover duplicados:
df.drop_duplicates()

Manter apenas a primeira ocorrência:
df.drop_duplicates(keep=“first”)

Manter apenas a última ocorrência:
df.drop_duplicates(keep=“last”)

Remover duplicados com base em colunas específicas:
df.drop_duplicates(subset=[“email”])

➡️ Muito usado em listas de clientes, cadastros, etc.

⸻

🔹 8. Padronizando textos

Converter tudo para minúsculas:
df[“nome”] = df[“nome”].str.lower()

Converter para maiúsculas:
df[“nome”] = df[“nome”].str.upper()

Remover espaços extras:
df[“nome”] = df[“nome”].str.strip()

Substituir parte do texto:
df[“email”] = df[“email”].str.replace(”@gmail.com”, “@outlook.com”)

➡️ Útil para normalizar nomes, emails e cidades.

⸻

🔹 9. Filtrando valores inválidos

Remover linhas com valores fora do padrão:
df = df[df[“idade”] > 0]

Remover registros com string vazia:
df = df[df[“nome”] != “”]

➡️ Assim você garante que os dados tenham consistência.

⸻

🔹 10. Detectando outliers (valores fora do padrão)

Usando desvio padrão:
media = df[“salario”].mean()
desvio = df[“salario”].std()
limite_superior = media + 3 * desvio
limite_inferior = media - 3 * desvio
outliers = df[(df[“salario”] > limite_superior) | (df[“salario”] < limite_inferior)]

➡️ Isso ajuda a identificar valores muito altos ou baixos fora da média.

⸻

🔹 11. Normalizando e padronizando dados

Normalizar (deixar entre 0 e 1):
df[“coluna_norm”] = (df[“coluna”] - df[“coluna”].min()) / (df[“coluna”].max() - df[“coluna”].min())

Padronizar (média 0, desvio 1):
df[“coluna_pad”] = (df[“coluna”] - df[“coluna”].mean()) / df[“coluna”].std()

➡️ Muito útil para preparar dados para algoritmos de machine learning.

⸻

🔹 12. Ordenando dados

Ordenar por uma coluna:
df.sort_values(“idade”)

Ordenar em ordem decrescente:
df.sort_values(“idade”, ascending=False)

Ordenar por várias colunas:
df.sort_values([“cidade”, “idade”])

➡️ Usado para organizar relatórios ou antes de agrupar.

⸻

🧭 13. Resumo rápido

Ação | Função | Descrição
Contar nulos | df.isnull().sum() | Mostra quantos valores faltam
Remover nulos | df.dropna() | Apaga linhas com valores vazios
Preencher nulos | df.fillna(valor) | Substitui por um valor padrão
Substituir valores | df.replace() | Troca textos ou números
Renomear colunas | df.rename() | Altera nomes de colunas
Converter tipos | df.astype() | Muda o tipo de dados
Remover duplicados | df.drop_duplicates() | Elimina registros repetidos
Padronizar texto | df[“col”].str.lower() | Corrige formatação de strings
Filtrar inválidos | df[df[“coluna”] > 0] | Remove registros incorretos
Detectar outliers | média ± 3 * desvio | Identifica valores extremos
Normalizar | (x - min) / (max - min) | Escala os dados entre 0 e 1
Ordenar | df.sort_values() | Reorganiza as linhas
