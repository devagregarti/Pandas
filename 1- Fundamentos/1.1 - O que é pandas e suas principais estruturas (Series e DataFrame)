
	📊 Estruturas principais do pandas: Series e DataFrame

O pandas é uma das bibliotecas mais importantes para ciência de dados, engenharia de dados e análise de tabelas no Python. Ele oferece duas estruturas de dados fundamentais:
	•	Series → estrutura 1D (uma dimensão)
	•	DataFrame → estrutura 2D (duas dimensões)

Essas estruturas são extremamente eficientes para trabalhar com dados tabulares, como arquivos CSV, Excel, ou mesmo resultados de consultas em bancos de dados.

⸻

1️⃣ Series (1D)

✅ O que é

Uma Series é uma lista unidimensional com rótulos (índices).
Pode conter números, strings, datas ou até objetos.
É parecida com:
	•	Um array do NumPy, mas com rótulos.
	•	Um dicionário do Python, mas otimizado para análise.

⸻

📌 Exemplo de criação

import pandas as pd
s = pd.Series([10, 20, 30, 40], index=[“a”, “b”, “c”, “d”])
print(s)

Saída esperada:
a    10
b    20
c    30
d    40
dtype: int64

⸻

📌 Acessando dados

print(s[“b”])      # Acessa pelo índice -> 20
print(s[2])        # Acessa pela posição -> 30

⸻

📌 Onde é utilizada
	•	Representar uma coluna de uma tabela (DataFrame).
	•	Vetores de dados com rótulos.
	•	Séries temporais (exemplo: preços diários de uma ação).

⸻

⚠️ Erros comuns

1. Confundir índice com posição

s = pd.Series([100, 200, 300], index=[“x”, “y”, “z”])
print(s[0])     # Funciona -> 100
print(s[“0”])   # Erro -> índice é string, não número

2. Ignorar o dtype

s = pd.Series([1, 2, “três”])
print(s.dtype)  # object (menos eficiente)

⸻

🚀 Impacto em performance
	•	Series com tipos homogêneos (int64, float64, datetime64) são rápidas.
	•	Series com object/string são mais lentas.
	•	Operações vetorizadas são muito eficientes:

s = pd.Series([1, 2, 3, 4, 5])
print(s * 2)   # Vetorizado, sem for

⸻

2️⃣ DataFrame (2D)

✅ O que é

Um DataFrame é uma tabela de dados, composta por:
	•	Linhas (indexadas)
	•	Colunas (cada coluna é uma Series)

É a estrutura mais utilizada no pandas.

⸻

📌 Exemplo de criação

import pandas as pd

dados = {
  “Nome”: [“Ana”, “Bruno”, “Carlos”],
  “Idade”: [25, 30, 22],
  “Cidade”: [“São Paulo”, “Rio”, “Curitiba”]
}

df = pd.DataFrame(dados)
print(df)

Saída esperada:
    Nome   Idade     Cidade
0     Ana     25  São Paulo
1   Bruno     30        Rio
2  Carlos     22   Curitiba

⸻

📌 Acessando dados

print(df[“Nome”])        # Acessa coluna (Series)
print(df.loc[0])         # Acessa linha pelo índice
print(df.iloc[1, 2])     # Acessa valor [linha 1, coluna 2] -> “Rio”

⸻

📌 Onde é utilizado
	•	Representar dados de planilhas, CSV e bancos de dados.
	•	Limpeza e transformação de dados em projetos de ETL.
	•	Análise de grandes volumes de dados.
	•	Machine Learning (dados de treino/teste quase sempre começam em DataFrames).

⸻

⚠️ Erros comuns

1. Esquecer que colunas são Series

print(type(df[“Idade”]))   # <class ‘pandas.core.series.Series’>

2. Confundir loc com iloc

print(df.loc[0, “Nome”])   # Usa rótulos -> “Ana”
print(df.iloc[0, 0])       # Usa posição -> “Ana”

3. Não usar operações vetorizadas

df[“Idade_2x”] = df[“Idade”] * 2   # Correto e rápido

4. Ignorar valores nulos (NaN)

import numpy as np
df.loc[1, “Idade”] = np.nan
print(df[“Idade”].mean())   # Pode gerar warning ou resultado inesperado

⸻

🚀 Impacto em performance
	•	DataFrames com colunas numéricas/datetime são altamente otimizados.
	•	Uso excessivo de loops for é muito lento → prefira operações vetorizadas (apply, map, groupby).
	•	Muitas colunas object/string tornam operações mais pesadas.

⸻

📊 Quadro comparativo: Series vs DataFrame
Característica
Series (1D)
DataFrame (2D)
Dimensão
1 (vetor)
2 (tabela)
Estrutura
Índice + valores
Índice + colunas (cada uma é uma Series)
Analogia
Coluna única
Planilha inteira (linhas + colunas)
Uso típico
Vetor de dados com rótulo
Conjunto de dados tabulares
Performance
Muito rápida (se homogênea)
Rápida, mas depende do tipo de dados
Erro comum
Confundir índice com posição
Confundir loc com iloc

Característica
Series (1D)
DataFrame (2D)
Dimensão
1 (vetor)
2 (tabela)
Estrutura
Índice + valores
Índice + colunas (cada uma é uma Series)
Analogia
Coluna única
Planilha inteira (linhas + colunas)
Uso típico
Vetor de dados com rótulo
Conjunto de dados tabulares
Performance
Muito rápida (se homogênea)
Rápida, mas depende do tipo de dados
Erro comum
Confundir índice com posição
Confundir loc com iloc


